
name: Kind in podman

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  kind-in-podman:
    name: Kind in podman
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        style: [ rootless, rootful ]
        podman-version: [ 3, 4 ]
    timeout-minutes: 15
    env:
      kind_create_opts: --config /etc/kind-cluster.yaml
    steps:
      - uses: actions/checkout@v3
      - name: Install podman 4.*
        uses: ./.github/actions/install-podman-4
        if: matrix.podman-version == '4'
      - name: Set podman env
        run: echo "podman=podman" >> $GITHUB_ENV
      - name: Set sudo podman env
        run: echo "podman=sudo podman" >> $GITHUB_ENV
        if: matrix.style == 'rootful'
      - name: Set sudo podman 3 env
        run: echo "podman=sudo -E XDG_RUNTIME_DIR= podman" >> $GITHUB_ENV
        if: matrix.style == 'rootful' && matrix.podman-version == '3'
      - name: Enable cpu cgroup delegation
        run: |
          for i in /sys/fs/cgroup/user.slice/cgroup.subtree_control \
            /sys/fs/cgroup/user.slice/user-$(id -u).slice/cgroup.subtree_control \
            /sys/fs/cgroup/user.slice/user-$(id -u).slice/user@$(id -u).service/cgroup.subtree_control ; do \
            echo '+cpu' | sudo tee -a $i ; \
          done
        if: matrix.style == 'rootless'
      - name: Build image
        run: $podman build -t localhost/kind .
      - run: sudo modprobe ip6_tables
      - name: Create a volume
        run: $podman volume create kind-data
      - name: Network definition for rootful
        run: echo "podman_run_opts=-v $(pwd)/kind-network.yaml:/etc/containers/networks/kind.json" >> $GITHUB_ENV
        if: matrix.style == 'rootful'
      - name: Run the podman container
        run: $podman run -d --privileged --read-only --name kind -v kind-data:/var/lib/containers $podman_run_opts -p 6443:6443 localhost/kind
      - name: Cluster configuration for rootless
        run: echo "kind_create_opts=--config /etc/kind-cluster-rootless.yaml" >> $GITHUB_ENV
        if: matrix.style == 'rootless'
      - name: Create kind cluster
        run: $podman exec kind kind create cluster --retain $kind_create_opts
      - run: $podman exec kind podman logs kind-control-plane
        if: ${{ failure() }}
      - run: $podman exec kind kubectl cluster-info --context kind-kind
      - run: $podman exec -ti kind kubectl wait --for=condition=ready -n kube-system pod/etcd-kind-control-plane pod/kube-apiserver-kind-control-plane --timeout=60s
      - run: $podman exec kind kubectl get all -A
      - run: $podman exec kind curl -k https://127.0.0.1:6443/
      - run: $podman rm -f kind
      - run: $podman run -d --privileged --read-only --name kind -v kind-data:/var/lib/containers $podman_run_opts -p 6443:6443 localhost/kind
      - run: $podman exec -ti kind podman start --all
      - run: $podman exec -ti kind podman wait --condition=running kind-control-plane ; sleep 10
      - run: $podman exec kind kubectl get all -A

  kind-in-k3s:
    name: Kind in K3s
    runs-on: ubuntu-22.04
    timeout-minutes: 15
    env:
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml
    steps:
      - uses: actions/checkout@v3
      - name: Install and setup K3s
        run: curl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode 644
      - name: Build image
        run: docker build -t localhost/kind .
      - name: Wait for the cluster to become ready
        run: while ! kubectl get nodes ; do sleep 5 ; done ; kubectl get nodes -o jsonpath='{.items[*].metadata.name}' | xargs kubectl wait --for=condition=ready node
      - run: kubectl get all -A
      - run: docker save localhost/kind | sudo k3s ctr images import -
      - run: sudo k3s ctr images ls
      - run: while ! kubectl get serviceaccount/default ; do sleep 5 ; done
      - run: while ! kubectl get -n kube-system service/traefik ; do sleep 5 ; done
      - run: kubectl apply -f - < kind-cluster-pod-k3s.yaml
      - run: while ! kubectl get pod/kind-cluster -o jsonpath="{.status.initContainerStatuses[0].state['running','terminated'].startedAt}" | grep . ; do kubectl get pod/kind-cluster ; sleep 5 ; done
      - run: kubectl logs -f pod/kind-cluster -c create-cluster
      - run: while ! kubectl get pod/kind-cluster -o jsonpath="{.status.containerStatuses[0].state['running','terminated'].startedAt}" | grep . ; do kubectl get pod/kind-cluster ; sleep 5 ; done
      - run: kubectl logs pod/kind-cluster
      - run: kubectl get pod/kind-cluster
      - run: kubectl describe pod/kind-cluster
      - run: kubectl exec pod/kind-cluster -- podman ps -a
      - run: kubectl exec pod/kind-cluster -- kubectl get all -A

      - run: kubectl exec pod/kind-cluster -- kubectl create serviceaccount -n default admin
      - run: kubectl exec pod/kind-cluster -- kubectl patch clusterrolebinding cluster-admin --type=json -p='[{"op":"add", "path":"/subjects/-", "value":{"kind":"ServiceAccount", "namespace":"default", "name":"admin" } }]'
      - run: kubectl --kubeconfig=./kubeconfig config set-cluster kind --server=https://$( kubectl get -n kube-system service/traefik -o jsonpath='{.status.loadBalancer.ingress[0].ip}' )/kind-api --insecure-skip-tls-verify=true
      - run: kubectl --kubeconfig=./kubeconfig config set-credentials kind-admin --token=$( kubectl exec pod/kind-cluster -- kubectl create token -n default admin )
      - run: kubectl --kubeconfig=./kubeconfig config set-context kind --cluster=kind --user=kind-admin
      - run: kubectl --kubeconfig=./kubeconfig config use-context kind
      - run: kubectl --kubeconfig=./kubeconfig get all -A

      - run: kubectl delete pod/kind-cluster
      - run: kubectl apply -f - < kind-cluster-pod-k3s.yaml
      - run: while ! kubectl get pod/kind-cluster -o jsonpath="{.status.containerStatuses[0].state['running','terminated'].startedAt}" | grep . ; do kubectl get pod/kind-cluster ; sleep 5 ; done
      - run: kubectl logs pod/kind-cluster -c create-cluster
      - run: kubectl logs pod/kind-cluster
      - run: while ! kubectl exec pod/kind-cluster -- curl -ks https://127.0.0.1:6443/ ; do sleep 1 ; done
      - run: kubectl exec pod/kind-cluster -- kubectl get all -A

      - run: kubectl --kubeconfig=./kubeconfig get all -A

