
name: Kind in podman

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
    - cron: '21 6 2,16 * *'

jobs:
  kind-in-podman:
    name: Kind
    runs-on: ubuntu-${{ matrix.os }}${{ matrix.arch == 'arm64' && '-arm' || '' }}
    strategy:
      fail-fast: false
      matrix:
        os: [ 22.04, 24.04 ]
        arch: [ amd64, arm64 ]
        style: [ rootless, rootful ]
        inner-podman-version: [ v5.4, v5.5 ]
        exclude:
          - os: 22.04
            style: rootful
          - os: 22.04
            inner-podman-version: v5.4
    timeout-minutes: 15
    env:
      kind_create_opts: --config /etc/kind-cluster.yaml
    steps:
      - uses: actions/checkout@v4
      - name: Install podman 4.*
        uses: ./.github/actions/install-podman-4
        if: matrix.os == '22.04'
      - name: Set podman env
        run: echo "podman=podman" >> $GITHUB_ENV
      - name: Set sudo podman env
        run: echo "podman=sudo podman" >> $GITHUB_ENV
        if: matrix.style == 'rootful'
      - name: Enable cpu cgroup delegation
        run: |
          for i in /sys/fs/cgroup/user.slice/cgroup.subtree_control \
            /sys/fs/cgroup/user.slice/user-$(id -u).slice/cgroup.subtree_control \
            /sys/fs/cgroup/user.slice/user-$(id -u).slice/user@$(id -u).service/cgroup.subtree_control ; do \
            echo '+cpu' | sudo tee -a $i ; \
          done
        if: matrix.style == 'rootless'
      - name: Use podman ${{ matrix.inner-podman-version }} in the container
        run: sed -i 's%^FROM quay\.io/podman/stable.*%FROM quay.io/podman/stable:${{ matrix.inner-podman-version }}%' Dockerfile
      - name: Allow the API server to be accessed from the host
        run: sed -i 's/# apiServerAddress:/apiServerAddress:/' kind-cluster*.yaml
      - name: Build image
        run: $podman build -t localhost/kind .
      - name: Create a volume
        run: $podman volume create kind-data
      - name: Network definition for rootless
        run: echo "podman_run_opts=-v $(pwd)/kind-network.yaml:/var/lib/containers/storage/networks/kind.json" >> $GITHUB_ENV
        if: matrix.style == 'rootless'
      - name: Network definition for rootful
        run: echo "podman_run_opts=-v $(pwd)/kind-network.yaml:/etc/containers/networks/kind.json" >> $GITHUB_ENV
        if: matrix.style == 'rootful'
      - name: Run the podman container
        run: $podman run -d --privileged --read-only --name kind -v kind-data:/var/lib/containers $podman_run_opts -p 6443:6443 localhost/kind
      - name: Cluster configuration for rootless
        run: echo "kind_create_opts=--config /etc/kind-cluster-rootless.yaml" >> $GITHUB_ENV
        if: matrix.style == 'rootless'
      - name: Create kind cluster
        run: $podman exec kind kind create cluster --retain $kind_create_opts
      - run: $podman exec kind podman logs kind-control-plane
        if: ${{ failure() }}
      - run: $podman exec kind kubectl cluster-info --context kind-kind
      - run: $podman exec -ti kind kubectl wait --for=condition=ready -n kube-system pod/etcd-kind-control-plane pod/kube-apiserver-kind-control-plane --timeout=60s
      - run: $podman exec kind kubectl get nodes -o jsonpath='{.items[*].metadata.name}' | xargs $podman exec kind kubectl wait --for=condition=ready node
      - run: $podman exec kind kubectl get nodes
      - run: $podman exec kind kubectl get all -A
      - run: |
          $podman exec kind curl -sk https://127.0.0.1:6443/ | tee /dev/stderr | grep -q 'forbidden: User \\"system:anonymous\\" cannot get path'
      - run: |
          curl -s --cacert <( $podman exec kind bash -c 'cat $KUBECONFIG' | awk '/certificate-authority-data:/ { print $2 }' | base64 -d ) https://127.0.0.1:6443/ | tee /dev/stderr | grep -q 'forbidden: User \\"system:anonymous\\" cannot get path'
      - run: curl -s --cacert <( $podman exec kind bash -c 'cat $KUBECONFIG' | awk '/certificate-authority-data:/ { print $2 }' | base64 -d ) -E <( $podman exec kind bash -c 'cat $KUBECONFIG' | awk '/client-certificate-data:/ { print $2 }' | base64 -d ) --key <( $podman exec kind bash -c 'cat $KUBECONFIG' | awk '/client-key-data:/ { print $2 }' | base64 -d ) https://127.0.0.1:6443/ | tee /dev/stderr | grep -Fq /apis/authentication.k8s.io/v1
      - run: $podman rm -f kind
      - run: $podman run -d --privileged --read-only --name kind -v kind-data:/var/lib/containers $podman_run_opts -p 6443:6443 localhost/kind
      - run: $podman exec -ti kind podman start --all
      - run: $podman exec -ti kind podman wait --condition=running kind-control-plane ; sleep 10
      - run: $podman exec kind kubectl get all -A

